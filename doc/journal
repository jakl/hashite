Total Hours For Week 9: (not including saturday)

James Koval		9
Brian		11
Vladimir		14.5
Ryan		13

Saturday Team Meeting: 1hr.


Journal Team Entry: "full of learning insights"


The team learned syntax for wonderful things like threads, Graphics, Picture Boxes, Timers, and more advanced uses of buttons and text boxes. We learned how object oriented code, when done well, makes integration of parts easy. Taking only a few implemented classes built with dummy classes, then transfering each person's implemented calsses into one project went smoothly. A few edits to sycronize our separate interface improvements and we had a working program. We are progressing well in sorting out how to use a diverse team's skills effectively. Vladimir learned how to safely interup a thead. James and Ryan learned how to manipulate a Graphics object to display a graph like image. Brian learned how to coordinate between a set of complex class structures and diagram for relatively clean OOP. We have been finding having team memebers with experience in a particular area helps speed the learning of other teammates in that area when we take the time to help each other catch up. We have learned a few things about how hashes perform and the fun ways functions react when constrained to a set range of outputs.




Total Hours For Week 10: (not including Friday, Nov 14 and Saturday, Nov 15)

James Koval		13.8
Brian		13.8
Vladimir		(contact Vladimir) estimate: 5
Ryan		8

Friday Team Meeting: 1hr.


Journal Team Entry: "full of learning insights"

The team learned syntax for things like the color dialogs, interesting things like slider bar use in the form, and how to add information simply and easily to an ood project. We made progress in finding out how to coordinate a project between several members. The svn source control made it a lot easier to integrate changes done on multiple computers. We appreciated the interaction of working in the same room for portions that required cross class alterations. As we progressed we found having a functional project allowed easy improvement, revisision, and expansion of it, which provided a helpful look at practical programming. We are still learning how to balance between detail and abstraction for documentation inside and outside of the program.